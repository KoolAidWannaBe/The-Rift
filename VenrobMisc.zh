#option SHORT_CIRCUIT on
/**
* Author: Venrob
* Version: 1.3
* Release: July 22nd, 2019
* Purpose: Miscellaneous functions, which I tend to use in my scripts.
*/
namespace Venrob
{
	typedef const int CONFIG;
	typedef const bool CONFIGB;
	/**
	* My version of RunNPCScript, since noone else has one yet.
	* Takes an enemy ID, and an NPC script number, as well as optional args.
	* Spawns an enemy of that ID, assigns it the script and args.
	* Returns an `npc` pointer to the new enemy.
	*/
	npc RunNPCScript(int ID, int scriptNum, untyped args)
	{
		// Invalid script
		if(scriptNum < 0 || scriptNum > 511)
			return Debug->NULL();
		
		npc n = Screen->CreateNPC(ID);
		n->Script = scriptNum;
		if (args)
		{
			for (int q = SizeOfArray(args) - 1; q >= 0; --q)
				n->InitD[q] = args[q];
		}
		return n;
	}
	npc RunNPCScript(int ID, int scriptNum)
	{
		return RunNPCScript(ID, scriptNum, NULL);
	}
	
	/**
	* As above, but takes x and y args, and assigns them to the new NPC.
	*/
	npc RunNPCScriptAt(int ID, int scriptNum, int x, int y, untyped args)
	{
		npc n = RunNPCScript(ID, scriptNum, args);
		n->X = x;
		n->Y = y;
		return n;
	}
	npc RunNPCScriptAt(int ID, int scriptNum, int x, int y)
	{
		return RunNPCScriptAt(ID, scriptNum, x, y, NULL);
	}
	
	/**
	* Returns 1 if the dir is rightward, -1 if leftward, 0 if neither
	*/
	int dirX(int dir)
	{
		switch(dir)
		{
			case DIR_RIGHT: case DIR_RIGHTUP: case DIR_RIGHTDOWN:
				return 1;
			case DIR_LEFT: case DIR_LEFTUP: case DIR_LEFTDOWN:
				return -1;
			default:
				return 0;
		}
	}

	/**
	* Returns 1 if the dir is downward, -1 if upward, 0 if neither
	*/
	int dirY(int dir)
	{
		switch(dir)
		{
			case DIR_DOWN: case DIR_LEFTDOWN: case DIR_RIGHTDOWN:
				return 1;
			case DIR_UP: case DIR_LEFTUP: case DIR_RIGHTUP:
				return -1;
			default:
				return 0;
		}
	}

	/**
	* Removes the horizontal component of a direction
	*/
	int remX(int dir)
	{
		switch(dir)
		{
			case DIR_UP: case DIR_LEFTUP: case DIR_RIGHTUP:
				return DIR_UP;
			case DIR_DOWN: case DIR_LEFTDOWN: case DIR_RIGHTDOWN:
				return DIR_DOWN;
			default:
				return -1;
		}
	}

	/**
	* Removes the vertical component of a direction
	*/
	int remY(int dir)
	{
		switch(dir)
		{
			case DIR_LEFT: case DIR_LEFTUP: case DIR_LEFTDOWN:
				return DIR_LEFT;
			case DIR_RIGHT: case DIR_RIGHTUP: case DIR_RIGHTDOWN:
				return DIR_RIGHT;
			default:
				return -1;
		}
	}

	/**
	* Spin a dir clockwise 45°
	*/
	int SpinDir8(int dir)
	{
		SpinDir8(dir, 1);
	}
	
	/**
	* Spin a dir clockwise 45°, `count` number of times
	* If count is negative, will spin counterclockwise instead
	*/
	int SpinDir8(int dir, int count)
	{
		if(count<0)
		{
			for(int q = (-count) % 8; q > 0; --q)
				switch(dir)
				{
					case DIR_UP: dir = DIR_LEFTUP; break;
					case DIR_RIGHTUP: dir = DIR_UP; break;
					case DIR_RIGHT: dir = DIR_RIGHTUP; break;
					case DIR_RIGHTDOWN: dir = DIR_RIGHT; break;
					case DIR_DOWN: dir = DIR_RIGHTDOWN; break;
					case DIR_LEFTDOWN: dir = DIR_DOWN; break;
					case DIR_LEFT: dir = DIR_LEFTDOWN; break;
					case DIR_LEFTUP: dir = DIR_LEFT; break;
					default: return -1;
				}
		}
		else
		{
			for(count %= 8;count > 0; --count)
				switch(dir)
				{
					case DIR_UP: dir = DIR_RIGHTUP; break;
					case DIR_RIGHTUP: dir = DIR_RIGHT; break;
					case DIR_RIGHT: dir = DIR_RIGHTDOWN; break;
					case DIR_RIGHTDOWN: dir = DIR_DOWN; break;
					case DIR_DOWN: dir = DIR_LEFTDOWN; break;
					case DIR_LEFTDOWN: dir = DIR_LEFT; break;
					case DIR_LEFT: dir = DIR_LEFTUP; break;
					case DIR_LEFTUP: dir = DIR_UP; break;
					default: return -1;
				}
		}
		return dir;
	}
	
	//start CanWalkM
	/** If true, then calling CanWalkM with the current screen's mapdata will use `Screen->` instead of the provided `mapdata->` */
	CONFIGB MAPDATA_USECURSCREEN = true;
	//start Standard (only checks ahead)
	/**
	* This function (and set of overloads) acts as CanWalk, but uses an arbitrary 
	*      `mapdata` pointer for solidity, rather than the current screen.
	* Related: `CurMapdata()`
	*/
	//lweapon
	bool CanWalkM(lweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		if(!weap->isValid())return false;
		return CanWalkM(weap->X + (useHit ? weap->HitXOffset : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->HitXOffset :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//eweapon
	bool CanWalkM(eweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		if(!weap->isValid())return false;
		return CanWalkM(weap->X + (useHit ? weap->HitXOffset : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->HitXOffset :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//npc
	bool CanWalkM(npc n, mapdata map, int dir, int step, bool useHit)
	{
		if(!n->isValid())return false;
		return CanWalkM(n->X + (useHit ? n->HitXOffset : 0), n->Y + (useHit ? n->HitYOffset : 0), n->X + (useHit ?  n->HitWidth + n->HitXOffset :  n->TileWidth * 16) - 1, n->Y + (useHit ?  n->HitHeight + n->HitYOffset :  n->TileHeight * 16) - 1, map, dir, step);
	}
	//ffc
	bool CanWalkM(ffc f, mapdata map, int dir, int step, bool useEffect)
	{
		return CanWalkM(f->X, f->Y, f->X + (useEffect ?  f->EffectWidth :  f->TileWidth * 16) - 1, f->Y + (useEffect ?  f->EffectHeight :  f->TileHeight * 16) - 1, map, dir, step);
	}
	//Link
	bool CanWalkM(mapdata map, int dir, int step)
	{
		return CanWalkM(Hero->X, Hero->Y + (Hero->BigHitbox ?  0 :  8), Hero->X + 15, Hero->Y + 15, map, dir, step);
	}
	//Main
	bool CanWalkM(int x, int y, int xx, int yy, mapdata map, int dir, int step)
	{
		if(MAPDATA_USECURSCREEN && map==CurMapdata()) return CanWalkS(x,y,xx,yy,dir,step);
		int width = xx - x + 1;
		int height = yy - y + 1;
		int midx = x + Floor(width/2);
		int midy = y + Floor(height/2);
		switch(dir)
		{
			case DIR_UP: return !(y-step<0||map->isSolid(x,y-step)||map->isSolid(midx,y-step)||map->isSolid(xx,y-step));
			case DIR_DOWN: return !(yy+step>=176||map->isSolid(x,yy+step)||map->isSolid(midx,yy+step)||map->isSolid(xx,yy+step));
			case DIR_LEFT: return !(x-step<0||map->isSolid(x-step,y)||map->isSolid(x-step,midy)||map->isSolid(x-step,yy));
			case DIR_RIGHT: return !(xx+step>=256||map->isSolid(xx+step,y)||map->isSolid(xx+step,midy)||map->isSolid(xx+step,yy));
			case DIR_LEFTUP: return (CanWalkM(x, y, xx, yy, map, DIR_LEFT, step) && CanWalkM(x, y, xx, yy, map, DIR_UP, step));
			case DIR_LEFTDOWN: return (CanWalkM(x, y, xx, yy, map, DIR_LEFT, step) && CanWalkM(x, y, xx, yy, map, DIR_DOWN, step));
			case DIR_RIGHTUP: return (CanWalkM(x, y, xx, yy, map, DIR_RIGHT, step) && CanWalkM(x, y, xx, yy, map, DIR_UP, step));
			case DIR_RIGHTDOWN: return (CanWalkM(x, y, xx, yy, map, DIR_RIGHT, step) && CanWalkM(x, y, xx, yy, map, DIR_DOWN, step));
		}
		return false; //invalid direction
	}
	
	//Current Screen
	bool CanWalkS(int x, int y, int xx, int yy, int dir, int step)
	{
		int width = xx - x + 1;
		int height = yy - y + 1;
		int midx = x + Floor(width/2);
		int midy = y + Floor(height/2);
		switch(dir)
		{
			case DIR_UP: return !(y-step<0||Screen->isSolid(x,y-step)||Screen->isSolid(midx,y-step)||Screen->isSolid(xx,y-step));
			case DIR_DOWN: return !(yy+step>=176||Screen->isSolid(x,yy+step)||Screen->isSolid(midx,yy+step)||Screen->isSolid(xx,yy+step));
			case DIR_LEFT: return !(x-step<0||Screen->isSolid(x-step,y)||Screen->isSolid(x-step,midy)||Screen->isSolid(x-step,yy));
			case DIR_RIGHT: return !(xx+step>=256||Screen->isSolid(xx+step,y)||Screen->isSolid(xx+step,midy)||Screen->isSolid(xx+step,yy));
			case DIR_LEFTUP: return (CanWalkS(x, y, xx, yy, DIR_LEFT, step) && CanWalkS(x, y, xx, yy, DIR_UP, step));
			case DIR_LEFTDOWN: return (CanWalkS(x, y, xx, yy, DIR_LEFT, step) && CanWalkS(x, y, xx, yy, DIR_DOWN, step));
			case DIR_RIGHTUP: return (CanWalkS(x, y, xx, yy, DIR_RIGHT, step) && CanWalkS(x, y, xx, yy, DIR_UP, step));
			case DIR_RIGHTDOWN: return (CanWalkS(x, y, xx, yy, DIR_RIGHT, step) && CanWalkS(x, y, xx, yy, DIR_DOWN, step));
		}
		return false; //invalid direction
	}
	//end Standard
	//start Full (Checks the FULL hitbox, not just where you are moving into)
	//lweapon
	bool CanWalkMFull(lweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		if(!weap->isValid())return false;
		return CanWalkMFull(weap->X + (useHit ? weap->HitXOffset : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->HitXOffset :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//eweapon
	bool CanWalkMFull(eweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		if(!weap->isValid())return false;
		return CanWalkMFull(weap->X + (useHit ? weap->HitXOffset : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->HitXOffset :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//npc
	bool CanWalkMFull(npc n, mapdata map, int dir, int step, bool useHit)
	{
		if(!n->isValid())return false;
		return CanWalkMFull(n->X + (useHit ? n->HitXOffset : 0), n->Y + (useHit ? n->HitYOffset : 0), n->X + (useHit ?  n->HitWidth + n->HitXOffset :  n->TileWidth * 16) - 1, n->Y + (useHit ?  n->HitHeight + n->HitYOffset :  n->TileHeight * 16) - 1, map, dir, step);
	}
	//ffc
	bool CanWalkMFull(ffc f, mapdata map, int dir, int step, bool useEffect)
	{
		return CanWalkMFull(f->X, f->Y, f->X + (useEffect ?  f->EffectWidth :  f->TileWidth * 16) - 1, f->Y + (useEffect ?  f->EffectHeight :  f->TileHeight * 16) - 1, map, dir, step);
	}
	//Link
	bool CanWalkMFull(mapdata map, int dir, int step)
	{
		return CanWalkMFull(Hero->X, Hero->Y + (Hero->BigHitbox ?  0 :  8), Hero->X + 15, Hero->Y + 15, map, dir, step);
	}
	//Main
	bool CanWalkMFull(int x, int y, int xx, int yy, mapdata map, int dir, int step)
	{
		if(MAPDATA_USECURSCREEN && map==CurMapdata()) return CanWalkSFull(x,y,xx,yy,dir,step);
		int width = xx - x + 1;
		int height = yy - y + 1;
		int midx = x + Floor(width/2);
		int midy = y + Floor(height/2);
		switch(dir)
		{
			case DIR_UP: return !(y-step<0||map->isSolid(x,y-step)||map->isSolid(midx,y-step)||map->isSolid(xx,y-step)||map->isSolid(x,yy-step)||map->isSolid(midx,yy-step)||map->isSolid(xx,yy-step));
			case DIR_DOWN: return !(yy+step>=176||map->isSolid(x,yy+step)||map->isSolid(midx,yy+step)||map->isSolid(xx,yy+step)||map->isSolid(x,y+step)||map->isSolid(midx,y+step)||map->isSolid(xx,y+step));
			case DIR_LEFT: return !(x-step<0||map->isSolid(x-step,y)||map->isSolid(x-step,midy)||map->isSolid(x-step,yy)||map->isSolid(xx-step,y)||map->isSolid(xx-step,midy)||map->isSolid(xx-step,yy));
			case DIR_RIGHT: return !(xx+step>=256||map->isSolid(xx+step,y)||map->isSolid(xx+step,midy)||map->isSolid(xx+step,yy)||map->isSolid(x+step,y)||map->isSolid(x+step,midy)||map->isSolid(x+step,yy));
			case DIR_LEFTUP: return (CanWalkMFull(x, y, xx, yy, map, DIR_LEFT, step) && CanWalkMFull(x, y, xx, yy, map, DIR_UP, step));
			case DIR_LEFTDOWN: return (CanWalkMFull(x, y, xx, yy, map, DIR_LEFT, step) && CanWalkMFull(x, y, xx, yy, map, DIR_DOWN, step));
			case DIR_RIGHTUP: return (CanWalkMFull(x, y, xx, yy, map, DIR_RIGHT, step) && CanWalkMFull(x, y, xx, yy, map, DIR_UP, step));
			case DIR_RIGHTDOWN: return (CanWalkMFull(x, y, xx, yy, map, DIR_RIGHT, step) && CanWalkMFull(x, y, xx, yy, map, DIR_DOWN, step));
		}
		return false; //invalid direction
	}
	
	//Current Screen
	bool CanWalkSFull(int x, int y, int xx, int yy, int dir, int step)
	{
		int width = xx - x + 1;
		int height = yy - y + 1;
		int midx = x + Floor(width/2);
		int midy = y + Floor(height/2);
		switch(dir)
		{
			case DIR_UP: return !(y-step<0||Screen->isSolid(x,y-step)||Screen->isSolid(midx,y-step)||Screen->isSolid(xx,y-step)||Screen->isSolid(x,yy-step)||Screen->isSolid(midx,yy-step)||Screen->isSolid(xx,yy-step));
			case DIR_DOWN: return !(yy+step>=176||Screen->isSolid(x,yy+step)||Screen->isSolid(midx,yy+step)||Screen->isSolid(xx,yy+step)||Screen->isSolid(x,y+step)||Screen->isSolid(midx,y+step)||Screen->isSolid(xx,y+step));
			case DIR_LEFT: return !(x-step<0||Screen->isSolid(x-step,y)||Screen->isSolid(x-step,midy)||Screen->isSolid(x-step,yy)||Screen->isSolid(xx-step,y)||Screen->isSolid(xx-step,midy)||Screen->isSolid(xx-step,yy));
			case DIR_RIGHT: return !(xx+step>=256||Screen->isSolid(xx+step,y)||Screen->isSolid(xx+step,midy)||Screen->isSolid(xx+step,yy)||Screen->isSolid(x+step,y)||Screen->isSolid(x+step,midy)||Screen->isSolid(x+step,yy));
			case DIR_LEFTUP: return (CanWalkS(x, y, xx, yy, DIR_LEFT, step) && CanWalkS(x, y, xx, yy, DIR_UP, step));
			case DIR_LEFTDOWN: return (CanWalkS(x, y, xx, yy, DIR_LEFT, step) && CanWalkS(x, y, xx, yy, DIR_DOWN, step));
			case DIR_RIGHTUP: return (CanWalkS(x, y, xx, yy, DIR_RIGHT, step) && CanWalkS(x, y, xx, yy, DIR_UP, step));
			case DIR_RIGHTDOWN: return (CanWalkS(x, y, xx, yy, DIR_RIGHT, step) && CanWalkS(x, y, xx, yy, DIR_DOWN, step));
		}
		return false; //invalid direction
	}
	//end Full
	//end CanWalkM
	
	/**
	* Returns a mapdata pointer to the current screen.
	*/
	mapdata CurMapdata()
	{
		return Game->LoadMapData(Game->GetCurMap(), Game->GetCurScreen());
	}

	/**
	 * Returns the length of the line which has an angle of `angle`, and results in a change in x of `deltax`
	 */
	int InvVectorX(int deltax, int angle)
	{
		return deltax / Cos(angle);
	}

	/**
	 * Returns the length of the line which has an angle of `angle`, and results in a change in y of `deltay`
	 */
	int InvVectorY(int deltay, int angle)
	{
		return deltay / Sin(angle);
	}
	
	//start Collsion Functions
	/**
	 * Checks if the given rectangle and triangle collide
	 */
	bool TriangleRectCollision(int tx1, int ty1, int tx2, int ty2, int tx3, int ty3, int rx1, int ry1, int rx2, int ry2)
	{
		define left = Min(rx1,rx2);
		define right = Max(rx1,rx2);
		define top = Min(ry1,ry2);
		define bottom = Max(ry1,ry2);
		return pointTriangleCollision(tx1, ty1, tx2, ty2, tx3, ty3, left, top)
			|| pointTriangleCollision(tx1, ty1, tx2, ty2, tx3, ty3, left, bottom)
			|| pointTriangleCollision(tx1, ty1, tx2, ty2, tx3, ty3, right, top)
			|| pointTriangleCollision(tx1, ty1, tx2, ty2, tx3, ty3, right, bottom)
			|| lineRectIntersect(tx1,ty1,tx2,ty2,left,right,top,bottom)
			|| lineRectIntersect(tx1,ty1,tx3,ty3,left,right,top,bottom)
			|| lineRectIntersect(tx3,ty3,tx2,ty2,left,right,top,bottom);
	}
	
	/**
	 * Checks if the given triangle collides with Hero, using Hero->BigHitbox's setting
	 */
	bool HeroTriangleCollision(int tx1, int ty1, int tx2, int ty2, int tx3, int ty3)
	{
		return HeroTriangleCollision(tx1, ty1, tx2, ty2, tx3, ty3, Hero->BigHitbox);
	}
	
	/**
	 * Checks if the given triangle collides with Hero, with an option for bigHitbox
	 */
	bool HeroTriangleCollision(int tx1, int ty1, int tx2, int ty2, int tx3, int ty3, bool bigHitbox)
	{
		return TriangleRectCollision(tx1, ty1, tx2, ty2, tx3, ty3, Hero->X, bigHitbox ? Hero->Y : Hero->Y + 8, Hero->X + 15, Hero->Y + 15);
	}
	
	/**
	 * Returns true if the line specified by points (x1,y1), (x2,y2) intersects with the rectangle defined by (left,right,top,bottom)
	 * Based on: https://seblee.me/2009/05/super-fast-trianglerectangle-intersection-test/
	 */
	bool lineRectIntersect(int x1, int y1, int x2, int y2, int left, int right, int top, int bottom)
	{
		define top_line = Min(y1,y2);
		define bot_line = Max(y1,y2);
		unless(x2-x1) //Handle vertical lines - avoid div by 0
		{
			return left < x1 && right > x1 && bot_line > top && top_line < bottom;
		}
		int m = (y2-y1) / (x2-x1); //Slope
		int b = y1 - (m*x1); //Y-intercept
		
		//Declare some vars
		int top_intersect, bot_intersect;
		
		if(m>0) //For a positive slope, the top intersect is on the left
		{
			top_intersect = m*left + b;
			bot_intersect = m*right + b;
		}
		else
		{
			top_intersect = m*right + b;
			bot_intersect = m*left + b;
		}
		
		int top_overlap = Max(top_intersect,top_line);
		int bot_overlap = Min(bot_intersect,bot_line);
		
		return (top_overlap<bot_overlap) && (!((bot_overlap<top) || (top_overlap>bottom)));
	}
	
	/**
	 * Returns true if a point (px,py) is within the triangle defined by (x1,y1), (x2,y2), (x3,y3)
	 */
	bool pointTriangleCollision(int x1, int y1, int x2, int y2, int x3, int y3, int px, int py)
	{
		//Checks the area of the triangle
		int triangleArea = Abs( (x2-x1)*(y3-y1) - (x3-x1)*(y2-y1) );
		//Checks the areas of each of 3 triangles, made from 2 points of the original triangle, and point (px,py)
		int a1 = Abs( (x1-px)*(y2-py) - (x2-px)*(y1-py) );
		int a2 = Abs( (x2-px)*(y3-py) - (x3-px)*(y2-py) );
		int a3 = Abs( (x3-px)*(y1-py) - (x1-px)*(y3-py) );
		//If the sum of these 3 areas is equivalent to the total area of the triangle, then the point is in the triangle
		return a1 + a2 + a3 == triangleArea;
	}
	//end
	
	/**
	 * My attempt at a solid FFC function. Call `ffcSolid(ffc)` each frame to make the ffc solid.
	 * This is not fully tested.
	 */
	void ffcSolid(ffc anFFC)//start
	{
		int linkspeed = Ceiling(1.5);
		int width = anFFC->EffectWidth;
		int height = anFFC->EffectHeight;
		int bottomheight = Hero->BigHitbox ? height : height - 8;
		if(bottomheight<1) bottomheight = 1; //Ensure that it is actually solid, even if only 8 tall with non-big hitbox
		if((Hero->Y>=anFFC->Y-(16+linkspeed)) && (Hero->Y<=anFFC->Y-16) && (Hero->X>=anFFC->X-15) && (Hero->X<=anFFC->X+(width-1)))//start inputdown
		{
			if(Hero->InputDown)
			{
				if(Hero->Y!=anFFC->Y-16)Hero->Y=anFFC->Y-16;
				Hero->Dir=DIR_DOWN;
				if(Hero->X>=anFFC->X+(width-4))
				{
					if(CanWalk(Hero->X,Hero->Y,DIR_RIGHT,Abs(Hero->X-(anFFC->X+width)),false))Hero->X=anFFC->X+width;
				} else if(Hero->X<=anFFC->X-12)if(CanWalk(Hero->X,Hero->Y,DIR_LEFT,Abs(Hero->X-anFFC->X-16),false))Hero->X=anFFC->X-16;
			}
			Hero->InputDown=false;
			Hero->PressDown=false;
			return;
		}//end
		if((Hero->Y<=anFFC->Y+(bottomheight+linkspeed)) && (Hero->Y>=anFFC->Y+bottomheight) && (Hero->X>=anFFC->X-15) && (Hero->X<=anFFC->X+(width-1))){//start inputup
			if(Hero->InputUp){
				if(Hero->Y!=anFFC->Y+bottomheight)Hero->Y=anFFC->Y+bottomheight;
				Hero->Dir=DIR_UP;
				if(Hero->X>=anFFC->X+(width-4)){
					if(CanWalk(Hero->X,Hero->Y,DIR_RIGHT,Abs(Hero->X-(anFFC->X+width)),false))Hero->X=anFFC->X+width;
				} else if(Hero->X<=anFFC->X-12)if(CanWalk(Hero->X,Hero->Y,DIR_LEFT,Abs(Hero->X-anFFC->X-16),false))Hero->X=anFFC->X-16;
			}
			Hero->InputUp=false;
			Hero->PressUp=false;
			return;
		}//end
		if((Hero->X>=anFFC->X-(16+linkspeed)) && (Hero->X<=anFFC->X-16) && (Hero->Y<=anFFC->Y+(bottomheight-1)) && (Hero->Y>=anFFC->Y-15)){//start inputright
			if(Hero->InputRight){
				if(Hero->X!=anFFC->X-16)Hero->X=anFFC->X-16;
				Hero->Dir=DIR_RIGHT;
				if(Hero->Y>=anFFC->Y+(bottomheight-4)){
					if(CanWalk(Hero->X,Hero->Y,DIR_DOWN,Abs(Hero->Y-(anFFC->Y+bottomheight)),false))Hero->Y=anFFC->Y+bottomheight;
				} else if(Hero->Y<=anFFC->Y-12)if(CanWalk(Hero->X,Hero->Y,DIR_UP,Abs(Hero->Y-(anFFC->Y-16)),false))Hero->Y=anFFC->Y-16;
			}
			Hero->InputRight=false;
			Hero->PressRight=false;
			return;
		}//end
		if((Hero->X<=anFFC->X+(width+linkspeed)) && (Hero->X>=anFFC->X+width) && (Hero->Y>=anFFC->Y-15) && (Hero->Y<=anFFC->Y+(bottomheight-1))){//start inputleft
			if(Hero->InputLeft){
				if(Hero->X!=anFFC->X+width)Hero->X=anFFC->X+width;
				Hero->Dir=DIR_LEFT;
				if(Hero->Y>=anFFC->Y+(bottomheight-4)){
					if(CanWalk(Hero->X,Hero->Y,DIR_DOWN,Abs(Hero->Y-(anFFC->Y+bottomheight)),false))Hero->Y=anFFC->Y+bottomheight;
				} else if(Hero->Y<=anFFC->Y-12)if(CanWalk(Hero->X,Hero->Y,DIR_UP,Abs(Hero->Y-(anFFC->Y-16)),false))Hero->Y=anFFC->Y-16;
			}
			Hero->InputLeft=false;
			Hero->PressLeft=false;
			return;
		}//end
	}//end
	
	/**
	 * Returns true if Hero is scrolling, or about to begin scrolling. Any scripted draws intended to not draw during scrolling should run only if this returns false.
	 * Due to variance with Hero's movement (1 or 2 pixels), this may sometimes return true extraneously.
	 */
	bool HeroIsScrolling()
	{
		return Hero->Action == LA_SCROLLING
			|| (Hero->X >= 239 && Input->Button[CB_RIGHT] && CanScrollInDir(DIR_RIGHT))
			|| (Hero->X <= 1 && Input->Button[CB_LEFT] && CanScrollInDir(DIR_LEFT))
			|| (Hero->Y <= 1 && Input->Button[CB_UP] && CanScrollInDir(DIR_UP))
			|| (Hero->Y >= 159 && Input->Button[CB_DOWN] && CanScrollInDir(DIR_DOWN));
	}
	
	/**
	 * Returns true if scrolling in a particular direction from this screen is valid. This checks for the edge of the map, respecting sidewarps.
	 */
	bool CanScrollInDir(int dir)
	{
		if(Game->GetCurScreen() == 0x80) return dir == DIR_DOWN;
		if(Screen->SideWarpID[dir] > -1) return true;
		switch(dir)
		{
			case DIR_UP:
				return Game->GetCurScreen() > 0x0F;
			case DIR_DOWN:
				return Game->GetCurScreen() < 0x70;
			case DIR_LEFT:
				return Game->GetCurScreen() % 0x10;
			case DIR_RIGHT:
				return (Game->GetCurScreen() % 0x10) != 0x0F;
		}
		return false;
	}
	
	/**
	 * Returns the X-offset to add to a sprite's coordinate to be directly in front of it, by 'dist' pixels of them
	 */
	int InFrontCenteredX(int dir, int dist)
	{
		switch(dir)
		{
			case DIR_UP:
			case DIR_DOWN:
				return 8;
			case DIR_LEFT:
				return -dist;
			case DIR_RIGHT:
				return 15+dist;
		}
	}
	
	/**
	 * Returns the Y-offset to add to a sprite's coordinate to be directly in front of it, by 'dist' pixels of them
	 */
	int InFrontCenteredY(int dir, int dist)
	{
		switch(dir)
		{
			case DIR_UP:
				return -dist;
			case DIR_DOWN:
				return 15+dist;
			case DIR_LEFT:
			case DIR_RIGHT:
				return 8;
		}
	}
	
	/**
	 * Zeroes all movement factors of an FFC
	 */
	void haltFFC(ffc f)
	{
		f->Vx = 0; f->Vy = 0;
		f->Ax = 0; f->Ay = 0;
	}
	
	//start Drawing Functions

	//As the name of the function implies, this was stolen from Moosh.
	void MooshDrawTile(int layer, int cx, int cy, int tile, int blockw, int blockh, int cset, int xscale, int yscale, int rx, int ry, int rangle, int flip, bool transparency, int opacity){
		int w = xscale;
		if(xscale==-1)
			w = blockw*16;
		int h = yscale;
		if(yscale==-1)
			h = blockh*16;
		Screen->DrawTile(layer, cx-w/2, cy-h/2, tile, blockw, blockh, cset, xscale, yscale, rx-w/2, ry-h/2, rangle, flip, transparency, opacity);
	}
	
	/**
	 * This will work as DrawString, but, it can draw over multiple vertical lines.
	 * Text over the Max Width, as well as newline characters ('\n'), will break to the next line.
	 * New params:
	 *	'verticalSpacing' is the extra space to include between lines.
	 *	'MaxWidth' is the width at which text will be forced onto the next line.
	 */
	void DrawStrings(int layer, int x, int y, int font, int color, int background_color, int format, char32 ptr, int opacity, int verticalSpacing, int MaxWidth)
	{
		int cpyptr[2048];
		strcpy(cpyptr,ptr);
		int fontHeight = Text->FontHeight(font);
		while(true)
		{
			int nlpos = ContainsCharPos(CHAR_NEWLINE, cpyptr);
			int width = 0;
			int lastEmptyPos = -1;
			int length = strlen(cpyptr);
			for(int q = 0; cpyptr[q] != 0; ++q)
			{
				char32 chr = cpyptr[q];
				if(chr==CHAR_SPACE) lastEmptyPos = q;
				if(chr==CHAR_NEWLINE)
				{
					lastEmptyPos = q;
					break;
				}
				width += Text->CharWidth(chr, font);
				if(width>=MaxWidth && lastEmptyPos!=-1) break;
				if(cpyptr[q+1]==0) lastEmptyPos = -1;
			}
			int pos;
			if(nlpos==-1)pos=lastEmptyPos;
			else if(lastEmptyPos==-1)pos=nlpos;
			else pos = Min(lastEmptyPos,nlpos);
			if(pos==-1) //No newline
			{
				Screen->DrawString(layer, x, y, font, color, background_color, format, cpyptr, opacity);
				return;
			}
			int buf[256];
			memcpy(buf, 0, cpyptr, 0, pos); //Copy first string
			Screen->DrawString(layer, x, y, font, color, background_color, format, buf, opacity);
			remnchr(cpyptr, 0, pos+1); //Shift back the string, deleting what was already drawn
			y+=fontHeight+verticalSpacing;
		}
	}

	
	/**
	 * This will work as DrawString, but, it can draw over multiple vertical lines.
	 * Text over the Max Width, as well as newline characters ('\n'), will break to the next line.
	 * New params:
	 *  'b' is the bitmap to render to.
	 *	'verticalSpacing' is the extra space to include between lines.
	 *	'MaxWidth' is the width at which text will be forced onto the next line.
	 */
	void DrawStringsBitmap(bitmap b, int layer, int x, int y, int font, int color, int background_color, int format, char32 ptr, int opacity, int verticalSpacing, int MaxWidth)
	{
		int cpyptr[2048];
		strcpy(cpyptr,ptr);
		int fontHeight = Text->FontHeight(font);
		while(true)
		{
			int nlpos = ContainsCharPos(CHAR_NEWLINE, cpyptr);
			int width = 0;
			int lastEmptyPos = -1;
			int length = strlen(cpyptr);
			for(int q = 0; cpyptr[q] != 0; ++q)
			{
				char32 chr = cpyptr[q];
				if(chr==CHAR_SPACE) lastEmptyPos = q;
				if(chr==CHAR_NEWLINE)
				{
					lastEmptyPos = q;
					break;
				}
				width += Text->CharWidth(chr, font);
				if(width>=MaxWidth && lastEmptyPos!=-1) break;
				if(cpyptr[q+1]==0) lastEmptyPos = -1;
			}
			int pos;
			if(nlpos==-1)pos=lastEmptyPos;
			else if(lastEmptyPos==-1)pos=nlpos;
			else pos = Min(lastEmptyPos,nlpos);
			if(pos==-1) //No newline
			{
				b->DrawString(layer, x, y, font, color, background_color, format, cpyptr, opacity);
				return;
			}
			int buf[256];
			memcpy(buf, 0, cpyptr, 0, pos); //Copy first string
			b->DrawString(layer, x, y, font, color, background_color, format, buf, opacity);
			remnchr(cpyptr, 0, pos+1); //Shift back the string, deleting what was already drawn
			y+=fontHeight+verticalSpacing;
		}
	}
	//end Drawing Functions
}
